#compdef repo

# ~/src/zsh/Etc/completion-style-guide
# https://github.com/zsh-users/zsh/blob/master/Etc/completion-style-guide
# https://github.com/zsh-users/zsh/blob/0194b4ab1d0fc6aeae5416edb0122146da9646c9/Etc/completion-style-guide#L480-L494
# http://stackoverflow.com/questions/9000698/completion-when-program-has-sub-commands
# TODO: list programs, function and styles used

# Note: to look for changes in repo's help, one can do this in a repo project:
# $ __repo_dump_help > $ZUKODIR/data/repo-help-dump
# $ cd $ZUKODIR
# $ bzip2 -f data/repo-help-dump
# $ git diff data/repo-help-dump.bz2
#
# for git diff to work on the bz2, you may have to do:
# 1. mkdir -p ${XDG_CONFIG_HOME:-~/.config}/git
# 2. echo '*.bz2 diff=bz2' >> ${XDG_CONFIG_HOME:-~/.config}/git/attributes
# 3. git config --global diff.bz2.binary true
# 4. git config --global diff.bz2.textconv bzcat
# TODO: review _arguments to see if -C is really needed everywhere it is used, I
# may have overused it

(( $+functions[__repo-help] )) ||
_repo-help() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(- :)'{-a,--all}'[show the complete list of commands and exit]' \
    ': :_repo_commands'
}

(( $+functions[__repo-init] )) ||
_repo-init() {
  __repo_init
}

(( $+functions[__repo-abandon] )) ||
_repo-abandon() {
  local curcontext="$curcontext"

  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-): :__repo_branch' \
    '(-)*:: :->project'

  case $state in
    (project)
      __repo_projects --with-branch $line[1]
      ;;
  esac
}

(( $+functions[__repo-branch] )) ||
_repo-branch() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[__repo-branches] )) ||
_repo-branches() {
  _repo-branch
}

(( $+functions[_repo-checkout] )) ||
_repo-checkout() {
  local curcontext="$curcontext"

  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-): :__repo_branch' \
    '(-)*:: :->project'

  case $state in
    (project)
      __repo_projects --with-branch $line[1]
      ;;
  esac
}

# TODO: list commits only present in other branches?
# can be costly on things like diverging linux kernels, should be limited to
# like ~10 commits like __git_recent_<something>
(( $+functions[_repo-cherry-pick] )) ||
_repo-cherry-pick() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-):sha1::'
}

(( $+functions[_repo-diff] )) ||
_repo-diff() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-u --absolute)'{-u,--absolute}'[paths are relative to the repository root]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-diffmanifests] )) ||
_repo-diffmanifests() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '--raw[display raw diff]' \
    '--no-color[does not display the diff in color]' \
    '(-):manifest1:_files -g \*.xml' \
    '(-)::manifest2:_files -g \*.xml'
}

# TODO: it is a pair of parameters that repo download takes
# can -c be interleaved inbetween pairs?
# TODO: completion from open reviews on gerrit
(( $+functions[_repo-download] )) ||
_repo-download() {
  local curcontext="$curcontext" state line
  typeset -A opt_args

  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-c --cherry-pick)'{-c,--cherry-pick}'[cherry-pick instead of checkout]' \
    '(-r --revert)'{-r,--revert}'[revert instead of checkout]' \
    '(-f --ff-only)'{-f,--ff-only}'[force fast-forward merge]' \
    '*::: :->project-or-change'

  if [[ $state = project-or-change ]]; then
    case $(( ${#words} % 2 )) in
      (1)
        __repo_projects
        ;;

      (0)
        project="$words[((CURRENT - 1))]"

        local -a args
        args=(--project "$project")
        for (( i = 1; i < (($#words - 1)); i += 2 )) do
            if [[ "$words[$i]" = "$project" ]]; then
              args+=(--skip ${words[(($i + 1))]%%/*})
            fi
        done
        curcontext="${curcontext%:*}:change"
        __repo_reviews "$args[@]"
        ;;
    esac
  fi
}

(( $+functions[_repo-grep] )) ||
_repo-grep() {
  # TODO: implement this
}

# TODO: short options can be shortened like with tar -d -l -> -dl
(( $+functions[_repo-info] )) ||
_repo-info() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-d --diff)'{-d,--diff}'[show full info and commit diff including remote branches]' \
    '(-o --overview)'{-o,--overview}'[show overview of all local commits]' \
    '(-b --current-branch)'{-b,--current-branch}'[consider only checked out branches]' \
    '(-l --local-only)'{-l,--local-only}'[disable all remote operations]' \
    '(-)*::projects:__repo_projects'
}

# TODO: implement the regex usage
# TODO: short option can be combined
(( $+functions[_repo-list] )) ||
_repo-list() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-r --regex)'{-r,--regex}'[filter the project list based on regex or wildcard matching of strings]' \
    '(-g --groups)'{-g,--groups=-}'[filter the project list based on the groups the project is in]:group:' \
    '(-f --fullpath)'{-f,--fullpath}'[display the full work tree path instead of the relative path]' \
    '(-n --name-only)'{-n,--name-only}'[display only the name of the repository]' \
    '(-p --path-only)'{-p,--path-only}'[display only the path of the repository]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-overview] )) ||
_repo-overview() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-b --current-branch)'{-b,--current-branch}'[consider only checked out branches]' \
    '(-)*::projects:__repo_projects'
}

# TODO: complete only projects with active (merged?) branches
(( $+functions[_repo-prune] )) ||
_repo-prune() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-)*::projects:__repo_projects'
}

# TODO: --interactive is single project only
(( $+functions[_repo-rebase] )) ||
_repo-rebase() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-i --interactive)'{-i,--interactive}'[interactive rebase]' \
    '(-f --force-rebase)'{-f,--force-rebase}'[pass --force-rebase to git rebase]' \
    '--no-ff[pass --no-ff to git rebase]' \
    '(-q --quiet)'{-q,--quiet}'[pass --quiet to git rebase]' \
    '--autosquash[pass --autosquash to git rebase]' \
    '--whitespace=-[pass --whitespace to git rebase]: :__repo_whitespace_action' \
    '--auto-stash[stash local modifications before starting]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-smartsync] )) ||
_repo-smartsync() {
  __repo_sync --smart
}

(( $+functions[_repo-stage] )) ||
_repo-stage() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-i --interactive)'{-i,--interactive}'[use interactive staging]' \
    '(-)*::projects:__repo_projects'
}

# TODO: complete existing branch name from other projects,
# then from this project
(( $+functions[_repo-start] )) ||
_repo-start() {
  local curcontext="$curcontext" state line
  typeset -A opt_args
  _arguments -C : \
    '(- :)'{-h,--help}'[show help message and exit]' \
    ': :__repo_branch' \
    '*::: :->optall-or-projects'

  if [[ $state = optall-or-projects ]]; then
    # if first word, add --all to the propositions
    if [[ ${#words} -eq 1 ]]; then
      optall_descr=(--all:"begin branch in all projects")
      _describe -t repo-start-allopt "all" optall_descr
    fi
    # if --all not in words, propose all unspecified projects
    if [[ ${words[(i)--all]} -gt ${#words} ]]; then
      local -a repo_projects_args
      for project in ${words[@]}; repo_projects_args+=(--skip "$project")
     __repo_projects --without-branch $line[1] ${repo_projects_args[@]}
     fi
  fi
}

(( $+functions[_repo-status] )) ||
_repo-status() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-j --jobs)'{-j,--jobs=-}'[number of projects to check simultaneously]:number of jobs:' \
    '(-o --orphans)'{-o,--orphans}'[include objects in working directory outside of repo projects]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-sync] )) ||
_repo-sync() {
  __repo_sync
}

# TODO: --reviewers completion
# TODO: --cc completion
# TODO: --br branch name completion
# TODO: basically completion for all options
# TODO: complete only projects with something to publish
(( $+functions[_repo-upload] )) ||
_repo-upload() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '-t[send local branch name to Gerrit Code Review]' \
    '(--re --reviewers)'{--re=-,--reviewers=-}'[request reviews from these people]:reviewers:' \
    '--cc=-[also send email to these email addresses]:emails:' \
    '(--br --cbr --current-branch)--br=-[branch to upload]:branch:' \
    '(--br --cbr --current-branch)'{--cbr,--current-branch}'[upload current git branch]' \
    '(-d --draft)'{-d,--draft}'[upload as a draft]' \
    '(-D --destination --dest)'{-D,--destination=-,--dest=-}'[submit for review on this target branch]:branch:' \
    '--no-verify[do not run the upload hook]' \
    '--verify[run the upload hook without prompting]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-gitc-delete] )) ||
_repo-gitc-delete() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '--force[force the deletion]'
}

(( $+functions[_repo-gitc-init] )) ||
_repo-gitc-init() {
  __repo_init --gitc
}

# TODO: --suppress-upstream-revision only available when --revision-as-HEAD?
(( $+functions[_repo-manifest] )) ||
_repo-manifest() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-r --revision-as-HEAD)'{-r,--revision-as-HEAD}'[save revisions as current HEAD]' \
    '--suppress-upstream-revision[if in -r mode, do not write the upstream field]' \
    '(-o --output-file)'{-o,--output-file=-}'[file to save the manifest to]:manifest filename:'
}

(( $+functions[_repo-selfupdate] )) ||
_repo-selfupdate() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '--no-repo-verify[do not verify repo source code]'
}

(( $+functions[_repo-version] )) ||
_repo-version() {
  _arguments '(- :)'{-h,--help}'[show help message and exit]'
}

# 2 categories
# main commands - commonly used commands
# expert commands - other[ recognized]/expert commands
(( $+functions[__repo_commands] )) ||
_repo_commands() {
  local -a initial_commands
  local -a main_commands
  local -a advanced_commands

  initial_commands=(
    init:"install repo in the current working directory"
    help:"display list of commands or detailed help of a command"
  )

  main_commands=(
    abandon:"permanently abandon a development branch"
    branch:"view current topic branches"
    branches:"view current topic branches"
    checkout:"checkout a branch for development"
    diff:"show changes between commit and working tree"
    diffmanifests:"manifest diff utility"
    download:"download and checkout a change"
    grep:"print lines matching a pattern"
    info:"get info on the manifest branch, current branch or unmerged branches"
    list:"list projects and their associated directories"
    overview:"display overview of unmerged project branches"
    prune:"prune (delete) already merged topics"
    rebase:"rebase local branches on upstream branch"
    smartsync:"update working tree to the latest known good revision"
    stage:"stage file(s) for commit"
    start:"start a new branch for development"
    status:"show the working tree status"
    sync:"update working tree to the latest revision" # smartsync + bonuses
    upload:"upload changes for code review"
  )

  # 'cherry-pick' only has sense when in a project
  >& /dev/null __gitroot && main_commands+=(cherry-pick:"cherry-pick a change")

  advanced_commands=(
    forall:"Run a shell command in each project"
    gitc-delete:"delete a GITC Client"
    gitc-init:"initialize a GITC Client"
    manifest:"manifest inspection utility"
    selfupdate:"update repo to the latest version"
    version:"display the version of repo"
  )

  # TODO: git somewhow manage to have multiple groups for this, see:
  #     cmdtypes=(main_porcelain_commands user_commands, ...)
  # FIXME: here I managed to do it by I cannot use the "standard" tag "commands"
  #        so I don't think it is the proper way to proceed
  _describe -t repo-commands "command" initial_commands -- main_commands
  _describe -t repo-other-commands "advanced command" advanced_commands
}

# TODO: --manifest-url/--repo-url should be use __git_any_repositories instead of _urls?
# TODO: --manifest-branch/--repo-branch should be __git_*revision*?
# TODO: for --depth use __git_guard_number depth
# TODO: could have completion for --groups=, --platform=
(( $+functions[__repo_init] )) ||
__repo_init() {
  local -a init_opts

  init_opts=(
    '(- :)'{-h,--help}'[show help message and exit]'
    '(-q --quiet)'{-q,--quiet}'[be quiet]'
    '(-u --manifest-url)'{-u,--manifest-url=-}'[manifest repository location]: :_urls'
    '(-b --manifest-branch)'{-b,--manifest-branch=-}'[manifest branch or revision]:revision:'
    '(-m --manifest-name)'{-m,--manifest-name=-}'[initial manifest file]:name.xml:'
    '--mirror[create a replica of the remote repositories rather than a client working directory]'
    '--reference=-[location of mirror directory]: :_directories'
    '--depth=-[create a shallow clone with given depth]:depth:'
    '--archive[checkout an archive instead of a git repository for each project]'
    '(-g --groups)'{-g,--groups=-}'[restrict manifest projects to ones with specified group(s)]:group:'
    '(-p --platform)'{-p,--platform=-}'[restrict manifest projects to ones with a specified platform group]:platform:'
    '--repo-url=-[repo repository location]: :_urls'
    '--repo-branch=-[repo branch or revision]:revision:'
    '--no-repo-verify[do not verify repo source code]'
    '--config-name[Always prompt for name/e-mail]'
  )

  if [[ $1 == --gitc ]]; then
    init_opts+=(
      '(-f --manifest-file)'{-f,--manifest-file=-}'[optional manifest file to use for this GITC client]:manifest file:'
      '(-c --gitc-client)'{-c,--gitc-client=-}'[the name of the gitc_client instance to create or modify]:gitc client:'
      '1:client name:'
    )
  fi

  _arguments "${init_opts[@]}"
}

(( $+functions[__repo_sync] )) ||
__repo_sync() {
  local -a sync_opts

  sync_opts=(
    '(- :)'{-h,--help}'[show help message and exit]'
    '(-f --force-broken)'{-f,--force-broken}'[continue sync even if a project fails to sync]'
    '--force-sync[overwrite an existing git directory if it needs to point to a different object directory]'
    '(-l --local-only)'{-l,--local-only}"[only update working tree, don't fetch]"
    '(-n --network-only)'{-n,--network-only}"[fetch only, don't update working tree]"
    '(-d --detach)'{-d,--detach}'[detach projects back to manifest revision]'
    '(-c --curent-branch)'{-c,--current-branch}'[fetch only current branch from server]'
    '(-q --quiet)'{-q,--quiet}'[be more quiet]'
    '(-j --jobs)'{-j,--jobs=-}'[number of projects to fetch simultaneously]:number of jobs:'
    '(-m --manifest-name)'{-m,--manifest-name=-}'[temporary manifest to use for this sync]:name.xml:'
    '--no-clone-bundle[disable use of /clone.bundle on HTTP/HTTPS]'
    '(-u --manifest-server-username)'{-u,--manifest-server-username=-}'[username to authenticate with the manifest server]:username:'
    '(-p --manifest-server-password)'{-p,--manifest-server-password=-}'[password to authenticate with the manifest server]:password:'
    '--fetch-submodules[fetch submodules from server]'
    "--no-tags[don't fetch tags]"
    '--optimized-fetch[only fetch projects fixed to sha1 if revision does not exist locally]'
    '--no-repo-verify[do not verify repo source code]'
  )

  if [[ $1 != --smart ]]; then
    sync_opts+=(
      '(-s --smart-sync)'{-s,--smart-sync}'[smart sync using manifest from a known good build]'
      '(-t --smart-tag)'{-t,--smart-tag=-}'[smart sync using manifest from a known tag]:tag:'
    )
  fi

  _arguments \
    "${sync_opts[@]}" \
    '(-)*::projects:__repo_projects'
}

(( $+functions[__repodir] )) ||
__repodir () {
  emulate -L zsh
  setopt extendedglob
  unsetopt interactive_comments

  # 1. Recursive globbing: (../)#
  #    LESS=+/"^ *Recursive Globbing *$" man zshexpn
  # 2. Pattern to lookup: .repo
  # 3. Glob qualifier in parenthesis
  #    '/' to keep directories
  #    [1] to limit to the first (closest) match (note: Y1 could be used
  #        on recent version of but it is not supported on 5.0.2 shipped
  #        on Ubuntu 14.04)
  #    LESS=+/"^ *Glob Qualifiers *$" man zshexpn
  # 4. Modifier
  #    :h dirname
  #    LESS=+/"^ *Modifiers *$" man zshexpn
  #
  # thanks http://unix.stackexchange.com/a/64164
  echo (../)#.repo(/[1]:h)
}

(( $+functions[__gitroot] )) ||
__gitroot () {
  _call_program git-root git rev-parse --show-toplevel
}

(( $+functions[__repo_project_branches] )) ||
__repo_project_branches () {
  #FIXME: _call_program project-branches not working?
  git -C "$1" \
      --no-pager -c core.preloadindex=true \
      for-each-ref "--format=%(refname:short)" refs/heads
}

(( $+functions[__repo_projects_fullpath] )) ||
__repo_projects_fullpath () {
  _call_program repo-list-projects repo list --fullpath --path-only
}

# Print the a relative path from the second directory to the first,
# defaulting the second directory to $PWD if none is specified.
#
# See zsh-users 4850: Re: Convert absolute paths to relative paths
# Thanks Vin Shelton and Bart Schaefer
# http://www.zsh.org/mla/users/2002/msg00268.html
#
# 'realpath --relative-to=' is not available on Ubuntu 14.04, so make a custom
# function instead
#     _call_program relpath realpath --relative-to=$2 "$1"
(( $+functions[__repo_relpath] )) ||
__repo_relpath () {
  emulate -L zsh || return 1

  [[ $1 != /* ]] && print $1 && return
  [[ -f $1 ]] && 3=$1:t 1=$1:h
  [[ -d $1 && -d ${2:=$PWD} ]] || return 1
  [[ $1 -ef $2 ]] && print ${3:-.} && return

  # The simplest way to eliminate symlinks and ./ and ../ in the paths:
  1=$(cd $1; pwd -r)
  2=$(cd $2; pwd -r)

  local -a cur abs
  cur=(${(s:/:)2})              # Split 'current' directory into cur
  abs=(${(s:/:)1} $3)           # Split target directory into abs

  # Compute the length of the common prefix, or discover a subdiretory:
  integer i=1
  while [[ i -le $#abs && $abs[i] == $cur[i] ]]
  do
    ((++i > $#cur)) && print ${(j:/:)abs[i,-1]} && return
  done

  2=${(j:/:)cur[i,-1]/*/..}     # Up to the common prefix directory and
  1=${(j:/:)abs[i,-1]}          # down to the target directory or file

  print $2${1:+/$1}
}

# should we put the branches available in the current directory first?
#
# TODO: for abandon and checkout this could be made better
# we could want to separate active vs inactive branches in different groups
# for checkout we would want to favor non-checked out branches
(( $+functions[__repo_branch] )) ||
__repo_branch () {
  local -A branch_to_projects
  local repodir=$(__repodir)

  # list branches project by project
  for p in $(__repo_projects_fullpath); do
    local p_rel=$(__repo_relpath "$p" $repodir)
    for b in $(__repo_project_branches $p); branch_to_projects[$b]+=$p_rel$'\0'
  done

  local -a descr projects
  for k v in "${(@kv)branch_to_projects}"; do
    # projects to sorted array
    projects=(${(@0o)v})
    descr+=($k:"in "${(j:, :)projects})
  done

  _describe -t branches 'branch' descr
}

# list repo paths relative to current directory
# . is selected first, then subpaths, parent/sibling paths
#
# Supported options:
# --with-branch BRANCH (can be specified multiple times)
# --without-branch BRANCH (can be specified multiple times)
#
# TODO: check presence of realpath
# TODO: the current project, which can be called '.' is the shortest path
# composed only of dots and slashes
# TODO: remove previous projects
# TODO: list projects relative to current directory, then sub-paths then ../*
# TODO: could use _tags which will use tag-order to order current directory,
# sub-path, parent/or/siblings
# TODO: could use the path relative to the repo project as description, but only
# if not at the repo root
# TODO: paths with only .. / ../.. / etc should have a description with the path
# relative to the repo root to make it easier to understand
# TODO: could use repo list -fp . to determine the current project
(( $+functions[__repo_projects] )) ||
__repo_projects () {
  local p current_project p_rel mydir=$(pwd) keep
  local -a projects branches without_branches skip

  zparseopts -D -E -- -with-branch+:=branches -without-branch+:=without_branches -skip+:=skip

  branches=("${(@)branches:#--with-branch}")
  without_branches=("${(@)without_branches:#--without-branch}")
  skip=("${(@)skip:#--skip}")

  for p in $(__repo_projects_fullpath); do
    p_rel=$(__repo_relpath "$p" $mydir)

    if [[ $p_rel != *[^./]* ]] && \
         [[ -z $current_project || $p_rel < $current_project ]]; then
      # the first parent project can be transformed by '.' instead of ..,
      # ../.., ../../etc
      current_project=$p_rel
    fi
    projects+=($p_rel)
  done

  [[ -n $current_project ]] && projects[${projects[(i)$current_project]}]=.

  for project in $projects; do
    if [[ ${skip[(i)$project]} -le ${#skip} ]]; then
      continue
    fi

    keep=1

    # if --with-branch is specified, keep only projects whose branches match
    if (( ${+branches[1]} )); then
      keep=0
      for branch in $(__repo_project_branches $project); do
        if [[ ${branches[(i)$branch]} -le ${#branches} ]]; then
          keep=1
          break
        fi
      done
    fi

    # could factorize this a bit with --with-branch test,
    # so that only one call to __repo_project_branches is made,
    # but for now --with-branch and --without-branch aren't used in combination
    if (( ${+without_branches[1]} )); then
      for branch in $(__repo_project_branches $project); do
        if [[ ${without_branches[(i)$branch]} -le ${#without_branches} ]]; then
          keep=0
          break
        fi
      done
    fi

    [[ $keep -eq 1 ]] || continue

    _wanted projects expl "projects" compadd - "$project"
  done
}

(( $+functions[__repo_list_reviews] )) ||
__repo_list_reviews () {
  # --current-patch-set is needed to produce full results,
  # we want to propose the latest revision of a change in the completion
  ssh -o BatchMode=yes -a -x \
      "${GERRIT_URL}" \
      gerrit \
      query \
      --current-patch-set \
      --format=TEXT \
      status:open \
      "project:${GERRIT_PROJECT}"
}

(( $+functions[__repo_gerrit_query_project] )) ||
__repo_gerrit_query_project () {
  GERRIT_URL="$1" GERRIT_PROJECT="$2" \
            _call_program gerrit-list-project-reviews __repo_list_reviews
}

(( $+functions[__repo_project_path_name] )) ||
__repo_project_path_name () {
  _call_program repo-project-path-name repo list -n "$1"
}

(( $+functions[__repo_get_review_url_do] )) ||
__repo_get_review_url_do () {
  # Get the gerrit server.
  #
  # One manifest can have multiple remote,
  # and review server associated to this remote or not.
  # Since there are multiple possibilities,
  # it's better to query the project than to look in the manifest.
  #
  # This could be smarter but it seems difficult to do the right thing.
  #
  # I think ideally we should find the project's remote defined by the repo
  # manifest.
  # And then query the git config 'remote.<remote>.review'.
  #
  # To make things simpler, we pick up any remote with a review URL.
  # This should be correct for most people,
  # but might not be for those who specify multiples review URLs.
  # It has the merit of being simple.
  #
  # Additionally 'repo-review-url' can be customized to one's need.
  reviews=$(git -C "$1" config --local --get-regexp 'remote\..+\.review')
  echo $reviews[(w)2]
}

(( $+functions[__repo_get_review_url] )) ||
__repo_get_review_url () {
  _call_program repo-review-url __repo_get_review_url_do "$@"
}

(( $+functions[__repo_format_table] )) ||
__repo_format_table () {
  [[ $# -ne 2 ]] && [[ $# -ne 3 ]] && {
    1>&2 echo "error: bad argument __repo_format_table";
    return;
  }

  # first pass to find the maximum lengths
  local -a max_lengths
  for row in ${(P)2}
  do
    cols=("${(p@s:\0:)row[1,-2]}")
    for (( i = 1; i <= $#cols; i++ ))
    do
      # last column does not need to be padded
      [[ $i -eq $#cols ]] && continue
      if [[ $#max_lengths -lt $i ]] || [[ $max_lengths[$i] -lt $#cols[$i] ]]
      then
        max_lengths[$i]=$#cols[$i]
      fi
    done
  done

  local row_str
  # http://zshwiki.org/home/scripting/paramflags#rexprstring1string2flag
  # first pass to find the maximum lengths
  for row in ${(P)2}
  do
    cols=("${(p@s:\0:)row[1,-2]}")
    row_str=""
    for (( i = 1; i <= $#cols; i++ ))
    do
      [[ $i -gt 1 ]] && [[ $# -gt 2 ]] && row_str+="$3"
      row_str+="${(r:max_lengths[i]:::)cols[$i]}"
    done
    # Ugly way to remove trailing whitespaces,
    # in case some columns in the end are empty.
    # This is probably not necessary, we don't care
    # if there are a few trailing whitespaces...
    row_str="${row_str[1, (( -${#row_str##*[^ ]} -1 ))]}"
    set -A $1 "${(P)1[@]}" "$row_str"
  done
}

(( $+functions[__repo_reviews] )) ||
__repo_reviews () {
  local -a changes cols descriptions entries entry_lines project_path skip
  local fmt_str review_cols

  zparseopts -D -E -- -project:=project_path -skip+:=skip

  skip=("${(@)skip:#--skip}")
  project_name=$(__repo_project_path_name "${project_path[2]}")

  gerrit_url=$(__repo_get_review_url "${project_path[2]}")

  [[ -n "${gerrit_url}" ]] || _message -r "Notice: Gerrit URL not found"

  # query project's open reviews
  zstyle -a ":completion:${curcontext}:" cols cols || cols=()
  entries=("${(@ps:\n\n:)$(__repo_gerrit_query_project "${gerrit_url}" "${project_name}")}")

  # assumes indentation level is reliable...
  typeset -A key_to_pattern
  key_to_pattern=(
    branch   "  branch: "
    topic    "  topic: "
    change   "  number: "
    subject  "  subject: "
    patchset "    number: "
    name     "      name: "     # what name exactly, patchset uploader for now?
  )

  for entry in $entries; do
    # only work out on entries starting with "^change"
    [[ $entry =~ '^change ' ]] || continue

    # split entry in an array
    entry_lines=("${(@f)entry}")

    local -A entry_hash
    for key in ${(k)key_to_pattern}
    do
      local idx=${entry_lines[(i)${key_to_pattern[$key]}*]}
      [[ ${idx} -le ${#entry_lines} ]] || continue
      entry_hash[$key]=${entry_lines[$idx]#${key_to_pattern[$key]}}
    done

    [[ ${skip[(i)${entry_hash[change]}]} -le ${#skip} ]] && continue

    # reset and fill review_cols
    # review_cols is a null-separated list of strings
    review_cols=""
    for col_fmt in ${cols[@]}
    do
      zformat -f fmt_str "$col_fmt" \
              a:"${entry_hash[name]}" \
              b:"${entry_hash[branch]}" \
              t:"${entry_hash[topic]}" \
              T:${#entry_hash[topic]} \
              s:"${entry_hash[subject]}"
      review_cols+="${fmt_str}"$'\0'
    done

    changes+="${entry_hash[change]}/${entry_hash[patchset]}"
    descriptions+="${review_cols}"

    unset entry_hash
  done

  # transform the associative array in a description array
  # display review cols as a table, aligning the columns
  local -a reviews descriptions_table
  __repo_format_table descriptions_table descriptions "  "

  for (( i = 1; i <= $#changes; i++ ))
  do
    if [[ -z $descriptions_table ]]; then
      reviews+=$changes[$i]
    else
      reviews+=$changes[$i]:"$descriptions_table[$i]"
    fi
  done

  _describe -t gerrit-reviews "change/patchset" reviews $*
}

(( $+functions[__repo_whitespace_action] )) ||
__repo_whitespace_action () {
  local -a actions

  actions=(
    nowarn:"turns off the trailing whitespace warning"
    warn:"outputs warnings for a few such errors, but applies the patch as-is (default)"
    {fix,strip}:"outputs warnings for a few such errors, and applies the patch after fixing them"
    error:"outputs warnings for a few such errors, and refuses to apply the patch"
    error-all:"is similar to error but shows all errors"
  )

  _describe -t whitespace-action "action" actions $*
}

# stolen from _git
(( $+functions[__repo_color_whens] )) ||
__repo_color_whens () {
  local -a whens

  whens=(
    always:'always use colors'
    auto:'use colors if output is to a terminal'
    never:'never use colors'
  )

  _describe -t whens "when" whens $*
}

# TODO: completion for repo command in non-initialized repo
#       the set of option/subcommands available is different/limited
#       called "repo launcher" by repo --version
_repo() {
  # autoload +X _git required if git functions are re-used

  local -a base_opts
  base_opts=(
    '(- :)'{-h,--help}'[show help message and exit]'
    '(-p --paginate)'{-p,--paginate}'[command output in the pager]'
    '--no-pager[disable the pager]'
    '--color=-[control color usage]: :__repo_color_whens'
    '--trace[trace git command execution]'
    '--time[time repo command execution]'
    '(- :)--version[display this version of repo and exit]'
  )

  local curcontext="$curcontext" state line
  typeset -A opt_args
  _arguments -C -S : \
             "${base_opts[@]}" \
             '(-): :_repo_commands' \
             '(-)*:: :->option-or-argument'

  # complete <command> arguments
  # if a function exists _repo-<command> call it,
  # otherwise do like git and use 'use-fallback'
  if [[ $state = option-or-argument ]]; then
    integer ret=1
    curcontext=${curcontext%:*:*}:repo-$words[1]:

    if ! _call_function ret _repo-$words[1]; then
      if zstyle -T :completion:$curcontext: use-fallback; then
        _default && ret=0
      else
        _message "unknown sub-command: $words[1]"
      fi
    fi
    return $ret
  fi

  return 0
}

(( $+functions[__repo_dump_help] )) ||
__repo_dump_help () {
  date --iso-8601
  echo
  repo version
  echo
  echo repo help --all
  echo "==============="
  echo
  repo help --all
  echo

  repo help --all | grep "^  " | while read command descr; do
    echo
    echo
    echo $command
    print ${(l:${#command}::=:)}
    repo help $command
  done
}

_repo "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
