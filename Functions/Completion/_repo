#compdef repo

# ~/src/zsh/Etc/completion-style-guide
# https://github.com/zsh-users/zsh/blob/master/Etc/completion-style-guide
# https://github.com/zsh-users/zsh/blob/0194b4ab1d0fc6aeae5416edb0122146da9646c9/Etc/completion-style-guide#L480-L494
# http://stackoverflow.com/questions/9000698/completion-when-program-has-sub-commands
# TODO: list programs, function and styles used

# TODO: review _arguments to see if -C is really needed everywhere it is used, I
# may have overused it

(( $+functions[__repo-help] )) ||
_repo-help() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(- :)'{-a,--all}'[show the complete list of commands and exit]' \
    ': :_repo_commands'
}

# TODO: --manifest-url/--repo-url should be use __git_any_repositories instead of _urls?
# TODO: --manifest-branch/--repo-branch should be __git_*revision*?
# TODO: for --depth use __git_guard_number depth
# TODO: could have completion for --groups=, --platform=
(( $+functions[__repo-init] )) ||
_repo-init() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-q --quiet)'{-q,--quiet}'[be quiet]' \
    '(-u --manifest-url)'{-u,--manifest-url=-}'[manifest repository location]: :_urls' \
    '(-b --manifest-branch)'{-b,--manifest-branch=-}'[manifest branch or revision]:revision:' \
    '(-m --manifest-name)'{-m,--manifest-name=-}'[initial manifest file]:name.xml:' \
    '--mirror[create a replica of the remote repositories rather than a client working directory]' \
    '--reference=-[location of mirror directory]: :_directories' \
    '--depth=-[create a shallow clone with given depth]:depth:' \
    '--archive[checkout an archive instead of a git repository for each project]' \
    '(-g --groups)'{-g,--groups=-}'[restrict manifest projects to ones with specified group(s)]:group:' \
    '(-p --platform)'{-p,--platform=-}'[restrict manifest projects to ones with a specified platform group]:platform:' \
    '--repo-url=-[repo repository location]: :_urls' \
    '--repo-branch=-[repo branch or revision]:revision:' \
    '--no-repo-verify[do not verify repo source code]' \
    '--config-name[Always prompt for name/e-mail]'
}

# TODO: branch completion
# TODO: project completion based on selected branch
(( $+functions[__repo-abandon] )) ||
_repo-abandon() {
  local curcontext="$curcontext"

  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-): :__repo_branch' \
    '(-)*:: :->project'

  case $state in
    (project)
      __repo_projects --with-branch $line[1]
      ;;
  esac
}

(( $+functions[__repo-branch] )) ||
_repo-branch() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[__repo-branches] )) ||
_repo-branches() {
  _repo-branch
}

(( $+functions[_repo-checkout] )) ||
_repo-checkout() {
  local curcontext="$curcontext"

  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-): :__repo_branch' \
    '(-)*:: :->project'

  case $state in
    (project)
      __repo_projects --with-branch $line[1]
      ;;
  esac
}

# TODO: list commits only present in other branches?
# can be costly on things like diverging linux kernels, should be limited to
# like ~10 commits like __git_recent_<something>
(( $+functions[_repo-cherry-pick] )) ||
_repo-cherry-pick() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-):sha1::'
}

(( $+functions[_repo-diff] )) ||
_repo-diff() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-u --absolute)'{-u,--absolute}'[paths are relative to the repository root]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-diffmanifests] )) ||
_repo-diffmanifests() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '--raw[display raw diff]' \
    '--no-color[does not display the diff in color]' \
    '(-):manifest1:_files -g \*.xml' \
    '(-)::manifest2:_files -g \*.xml'
}

# TODO: it is a pair of parameters that repo download takes
# can -c be interleaved between the set?
# TODO: completion from open reviews on gerrit
(( $+functions[_repo-download] )) ||
_repo-download() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-c --cherry-pick)'{-c,--cherry-pick}'[cherry-pick instead of checkout]' \
    '(-r --revert)'{-r,--revert}'[revert instead of checkout]' \
    '(-f --ff-only)'{-f,--ff-only}'[force fast-forward merge]' \
    ':project:__repo_projects' \
    ':change/patchset: '
}

(( $+functions[_repo-grep] )) ||
_repo-grep() {
  # TODO: implement this
}

# TODO: short options can be shortened like with tar -d -l -> -dl
(( $+functions[_repo-info] )) ||
_repo-info() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-d --diff)'{-d,--diff}'[show full info and commit diff including remote branches]' \
    '(-o --overview)'{-o,--overview}'[show overview of all local commits]' \
    '(-b --current-branch)'{-b,--current-branch}'[consider only checked out branches]' \
    '(-l --local-only)'{-l,--local-only}'[disable all remote operations]' \
    '(-)*::projects:__repo_projects'
}

# TODO: implement the regex usage
# TODO: short option can be combined
(( $+functions[_repo-list] )) ||
_repo-list() {
  _arguments -C \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-r --regex)'{-r,--regex}'[filter the project list based on regex or wildcard matching of strings]' \
    '(-g --groups)'{-g,--groups=-}'[filter the project list based on the groups the project is in]:group:' \
    '(-f --fullpath)'{-f,--fullpath}'[display the full work tree path instead of the relative path]' \
    '(-n --name-only)'{-n,--name-only}'[display only the name of the repository]' \
    '(-p --path-only)'{-p,--path-only}'[display only the path of the repository]' \
    '(-)*::projects:__repo_projects'
}

(( $+functions[_repo-overview] )) ||
_repo-overview() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-b --current-branch)'{-b,--current-branch}'[consider only checked out branches]' \
    '(-)*::projects:__repo_projects'
}

# TODO: complete only projects with active (merged?) branches
(( $+functions[_repo-prune] )) ||
_repo-prune() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-)*::projects:__repo_projects'
}

# TODO: --interactive is single project only
(( $+functions[_repo-rebase] )) ||
_repo-rebase() {
  _arguments \
    '(- :)'{-h,--help}'[show help message and exit]' \
    '(-i --interactive)'{-i,--interactive}'[interactive rebase (single project only)]' \
    '(-f --force-rebase)'{-f,--force-rebase}'[pass --force-rebase to git rebase]' \
    '--no-ff[pass --no-ff to git rebase]' \
    '(-q --quiet)'{-q,--quiet}'[pass --quiet to git rebase]' \
    '--autosquash[pass --autosquash to git rebase]' \
    '--whitespace=-[pass --whitespace to git rebase]: :__repo_whitespace_action' \
    '--auto-stash[stash local modifications before starting]' \
    '(-)*::projects:__repo_projects'
}

# 2 categories
# main commands - commonly used commands
# expert commands - other[ recognized]/expert commands
(( $+functions[__repo_commands] )) ||
_repo_commands() {
  local -a initial_commands
  local -a main_commands
  local -a advanced_commands

  initial_commands=(
    init:"install repo in the current working directory"
    help:"display list of commands"
  )

  main_commands=(
    abandon:"permanently abandon a development branch"
    branch:"view current topic branches"
    branches:"view current topic branches"
    checkout:"checkout a branch for development"
    diff:"show changes between commit and working tree"
    diffmanifests:"manifest diff utility"
    download:"download and checkout a change"
    grep:"print lines matching a pattern"
    info:"get info on the manifest branch, current branch or unmerged branches"
    list:"list projects and their associated directories"
    overview:"display overview of unmerged project branches"
    prune:"prune (delete) already merged topics"
    rebase:"rebase local branches on upstream branch"

    # smartsync:"update working tree to the latest known good revision"
    # stage:"stage file(s) for commit"
    # start:"start a new branch for development"
    # status:"show the working tree status"
    # sync:"update working tree to the latest revision"
    # upload:"upload changes for code review"
  )

  # 'cherry-pick' only has sense when in a project
  >& /dev/null __gitroot && main_commands+=(cherry-pick:"cherry-pick a change")

  advanced_commands=(
    forall:"Run a shell command in each project"
  )

  # TODO: git somewhow manage to have multiple groups for this, see:
  #     cmdtypes=(main_porcelain_commands user_commands, ...)
  # FIXME: here I managed to do it by I cannot use the "standard" tag "commands"
  #        so I don't think it is the proper way to proceed
  _describe -t repo-commands "command" initial_commands -- main_commands
  _describe -t repo-other-commands "advanced command" advanced_commands
}

# http://unix.stackexchange.com/a/64164
# FIXME: /Y1, which version of ZSH required for this?
(( $+functions[__repodir] )) ||
__repodir () {
  echo (../)#.repo(/Y1:a:h)
}

(( $+functions[__gitroot] )) ||
__gitroot () {
  _call_program git-root git rev-parse --show-toplevel
}

(( $+functions[__repo_project_branches] )) ||
__repo_project_branches () {
  #FIXME: _call_program project-branches not working?
  git -C "$1" \
      --no-pager -c core.preloadindex=true \
      for-each-ref "--format=%(refname:short)" refs/heads
}

(( $+functions[__repo_projects_fullpath] )) ||
__repo_projects_fullpath () {
  _call_program repo-list-projects repo list --fullpath --path-only
}

# should we put the branches available in the current directory first?
#
# TODO: for abandon and checkout this could be made better
# we could want to separate active vs inactive branches in different groups
# for checkout we would want to favor non-checked out branches
(( $+functions[__repo_branch] )) ||
__repo_branch () {
  local -A branch_to_projects
  local repodir=$(__repodir)

  # list branches project by project
  for p in $(__repo_projects_fullpath); do
    local p_rel=$(_call_program relpath realpath --relative-to=$repodir "$p")

    for b in $(__repo_project_branches $p); do
      if [[ -z branch_to_projects[$b] ]]; then
        # first time seeing this branch
        branch_to_projects[$b]=$p_rel
      else
        # another project
        branch_to_projects[$b]+=$'\0'$p_rel
      fi
    done
  done

  local -a descr projects
  for k v in "${(@kv)branch_to_projects}"; do
    # projects to sorted array
    projects=(${(@0o)v})
    descr+=($k:"in "${(j:, :)projects})
  done
  # branches=("${(@f)$(__repo_list_branches)}")
  # _wanted projects expl "branch" compadd -a - branches
  # _message -e branches "branch"
  _describe -V -t branches 'branch' descr
}

# list repo paths relative to current directory
# . is selected first, then subpaths, parent/sibling paths
#
# Supported options:
# --with-branch BRANCH (can be specified multiple times)
#
# TODO: check presence of realpath
# TODO: the current project, which can be called '.' is the shortest path
# composed only of dots and slashes
# TODO: remove previous projects
# TODO: list projects relative to current directory, then sub-paths then ../*
# TODO: could use _tags which will use tag-order to order current directory,
# sub-path, parent/or/siblings
# TODO: could use the path relative to the repo project as description, but only
# if not at the repo root
# TODO: paths with only .. / ../.. / etc should have a description with the path
# relative to the repo root to make it easier to understand
# TODO: could use repo list -fp . to determine the current project
(( $+functions[__repo_projects] )) ||
__repo_projects () {
  local p current_project p_rel mydir=$(pwd) keep
  local -a projects branches

  zparseopts -D -E -- -with-branch+:=branches

  branches=("${(@)branches:#--with-branch}")

  for p in $(__repo_projects_fullpath); do
    p_rel=$(_call_program relpath realpath --relative-to=$mydir "$p")

    if [[ $p_rel != *[^./]* ]] && \
         [[ -z $current_project || $p_rel < $current_project ]]; then
      # the first parent project can be transformed by '.' instead of ..,
      # ../.., ../../etc
      current_project=$p_rel
    fi
    projects+=($p_rel)
  done

  [[ -n $current_project ]] && projects[${projects[(i)$current_project]}]=.

  for project in $projects; do
    keep=1

    # if --with-branch is specified, keep only projects whose branches match
    if (( ${+branches[1]} )); then
      keep=0
      for branch in $(__repo_project_branches $project); do
        if [[ ${branches[(i)$branch]} -le ${#branches} ]]; then
          keep=1
          break
        fi
      done
    fi

    [[ $keep -eq 1 ]] || continue

    _wanted projects expl "projects" compadd - "$project"
  done
}

(( $+functions[__repo_whitespace_action] )) ||
__repo_whitespace_action () {
  local -a actions

  actions=(
    nowarn:"turns off the trailing whitespace warning"
    warn:"outputs warnings for a few such errors, but applies the patch as-is (default)"
    {fix,strip}:"outputs warnings for a few such errors, and applies the patch after fixing them"
    error:"outputs warnings for a few such errors, and refuses to apply the patch"
    error-all:"is similar to error but shows all errors"
  )

  _describe -t whitespace-action "action" actions $*
}

# stolen from _git
(( $+functions[__repo_color_whens] )) ||
__repo_color_whens () {
  local -a whens

  whens=(
    always:'always use colors'
    auto:'use colors if output is to a terminal'
    never:'never use colors'
  )

  _describe -t whens "when" whens $*
}

# TODO: completion for repo command in non-initialized repo
#       the set of option/subcommands available is different/limited
#       called "repo launcher" by repo --version
_repo() {
  # autoload +X _git required if git functions are re-used

  local -a base_opts
  base_opts=(
    '(- :)'{-h,--help}'[show help message and exit]'
    '(-p --paginate)'{-p,--paginate}'[command output in the pager]'
    '--no-pager[disable the pager]'
    '--color=-[control color usage]: :__repo_color_whens'
    '--trace[trace git command execution]'
    '--time[time repo command execution]'
    '(- :)--version[display this version of repo and exit]'
  )

  local curcontext="$curcontext" state line
  typeset -A opt_args
  _arguments -C -S : \
             "${base_opts[@]}" \
             '(-): :_repo_commands' \
             '(-)*:: :->option-or-argument'

  # complete <command> arguments
  # if a function exists _repo-<command> call it,
  # otherwise do like git and use 'use-fallback'
  if [[ $state = option-or-argument ]]; then
    integer ret=1
    curcontext=${curcontext%:*:*}:repo-$words[1]:

    if ! _call_function ret _repo-$words[1]; then
      if zstyle -T :completion:$curcontext: use-fallback; then
        _default && ret=0
      else
        _message "unknown sub-command: $words[1]"
      fi
    fi
    return $ret
  fi

  return 0
}

_repo "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
